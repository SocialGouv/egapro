---
include:
  - "/k8s/app/.deploy-egapro-app.yml"
  - "/k8s/api/.deploy-egapro-api.yml"
  - "/k8s/postgres/.deploy-egapro-postgres.yml"
  - "/k8s/memcached/.deploy-egapro-memcached.yml"
  - "/k8s/kinto/.deploy-egapro-kinto.yml"

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_VERSION: "18.06"
  IMAGE_INFRA_BASE_NAME: "infra/images-docker"
  DEV_ENVIRONMENT_NAME: "egapro-dev"
  PROD_ENVIRONMENT_NAME: "index-egapro.travail.gouv.fr"
  APP_PORT: 9000
  API_PORT: 4000
  KINTO_PORT: 8888
  POSTGRES_PORT: 5432
  MEMCACHED_PORT: 11212
  RANCHER_PROJECT_ID: c-gsm8d:p-9mvwt

stages:
  - "Code Quality"
  - "Prepare"
  - "Registration"
  - "Deploy dev"
  - "Deploy prod"
  - "Send Url to GitHub"
  - "Delete K8S objects"

##
#.quality_stage: &quality_stage
#  stage: "Code Quality"
#  image: node:10-alpine
#  before_script:
#    - yarn --frozen-lockfile
##
#
#Quality tests:
#  <<: *quality_stage
#  cache:
#    key: ${CI_COMMIT_REF_SLUG}
#    paths:
#      - node_modules/
#  script:
#    - yarn build
#    - yarn lint
#    - yarn test

###########################################
###               PREPARE               ###
###########################################

#
#.get_github_id_stage: &get_github_id_stage
#  stage: "Prepare"
#  image:
#    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
#    entrypoint: [""]
#  before_script:
#    - envsubst < k8s/scripts/get-deploy-id.sh > k8s/scripts/get-github-deploy-id.sh
#  script:
#    - sh k8s/scripts/get-github-deploy-id.sh
#  artifacts:
#    paths:
#      - github_deploy_id
##
#
#Get Github Id (dev):
#  <<: *get_github_id_stage
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  only:
#    - branches
#  except:
#    - master

#Get Github Id (prod):
#  <<: *get_github_id_stage
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags

###########################################
###       REGISTER DOCKER IMAGES        ###
###########################################

Create namespace (dev):
  stage: "Registration"
  image: $CI_REGISTRY/socialgouv/docker/kubectl:0.7.1
  script:
    - HASH_BRANCH_NAME=$(printf "$CI_COMMIT_REF_NAME" | sha1sum | cut -c1-5)
    - export HASH_BRANCH_NAME=-$HASH_BRANCH_NAME
    - export K8S_NAMESPACE=egapro${HASH_BRANCH_NAME}
    # Skip the job if the namespace exists
    - "[[ $(kubectl get namespace ${K8S_NAMESPACE}) ]] && exit ${CI_JOB_SKIP_EXIT_CODE:-0}"
    # Create namespace
    - kubectl create namespace ${K8S_NAMESPACE}
    - kubectl annotate namespace ${K8S_NAMESPACE} field.cattle.io/projectId=${RANCHER_PROJECT_ID}
    # Create secret
    - envsubst < ./.k8s/secret-dev.yml > ./secret-dev.yml
    - kubectl apply -f ./secret-dev.yml -n ${K8S_NAMESPACE}
  environment:
    name: $DEV_ENVIRONMENT_NAME
#
.register_stage: &register_stage
  stage: "Registration"
  image: docker:$DOCKER_VERSION
  services:
    - docker:$DOCKER_VERSION-dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    - docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || true
  script:
    - echo "Build $IMAGE_NAME:$CI_COMMIT_SHA from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA"
    - docker build --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA -t $IMAGE_NAME:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
    - docker push $IMAGE_NAME
#

#Register api image:
#  <<: *register_stage
#  variables:
#    CONTEXT: .
#    DOCKERFILE_PATH: packages/api/Dockerfile
#    IMAGE_NAME: $CI_REGISTRY_IMAGE/api

Register app image:
  <<: *register_stage
  variables:
    CONTEXT: .
    DOCKERFILE_PATH: packages/app/Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app

#Register init kinto image:
#  <<: *register_stage
#  variables:
#    CONTEXT: packages/kinto
#    DOCKERFILE_PATH: packages/kinto/Dockerfile
#    IMAGE_NAME: $CI_REGISTRY_IMAGE/kinto

###########################################
###            DEPLOY TO K8S            ###
###########################################

#
.deploy_stage: &deploy_stage
  dependencies: []
  variables: &deploy_stage_variables
    EGAPRO_REGISTRY: $CI_REGISTRY_IMAGE
    IMAGE_TAG: $CI_COMMIT_SHA
#

# Dev Environment

Deploy @egapro/app (dev):
  <<: *deploy_stage
  extends: .deploy-egapro-app-k8s-dev
  stage: "Deploy dev"
  variables:
    <<: *deploy_stage_variables
    PORT: $APP_PORT
  environment:
    name: $DEV_ENVIRONMENT_NAME
  only:
    - branches
  except:
    - master

#Deploy @egapro/api (dev):
#  <<: *deploy_stage
#  extends: .deploy-egapro-api-k8s-dev
#  stage: "Deploy dev"
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $API_PORT
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  only:
#    - branches
#  except:
#    - master

Deploy @egapro/postgres (dev):
  <<: *deploy_stage
  extends: .deploy-egapro-postgres-k8s-dev
  stage: "Deploy dev"
  variables:
    <<: *deploy_stage_variables
    PORT: $POSTGRES_PORT
  environment:
    name: $DEV_ENVIRONMENT_NAME
  only:
    - branches
  except:
    - master
#
#Deploy @egapro/memcached (dev):
#  <<: *deploy_stage
#  extends: .deploy-egapro-memcached-k8s-dev
#  stage: "Deploy dev"
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $MEMCACHED_PORT
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  only:
#    - branches
#  except:
#    - master
#
#Deploy @egapro/kinto (dev):
#  <<: *deploy_stage
#  extends: .deploy-egapro-kinto-k8s-dev
#  stage: "Deploy dev"
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $KINTO_PORT
#    CACHE_PORT: $MEMCACHED_PORT
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  only:
#    - branches
#  except:
#    - master

# Prod Environment

#Deploy @egapro/app (prod):
#  <<: *deploy_stage
#  extends: .deploy-egapro-app-k8s-prod
#  stage: "Deploy prod"
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $APP_PORT
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags
#
#Deploy @egapro/api (prod):
#  <<: *deploy_stage
#  extends: .deploy-egapro-api-k8s-prod
#  stage: "Deploy prod"
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $API_PORT
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags
#
#Deploy @egapro/memcached (prod):
#  <<: *deploy_stage
#  extends: .deploy-egapro-memcached-k8s-prod
#  stage: "Deploy prod"
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $MEMCACHED_PORT
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags
#
#Deploy @egapro/kinto (prod):
#  <<: *deploy_stage
#  extends: .deploy-egapro-kinto-k8s-prod
#  stage: "Deploy prod"
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $KINTO_PORT
#    CACHE_PORT: $MEMCACHED_PORT
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags

###########################################
###         SEND URL TO GITHUB          ###
###########################################

##
#.send_url_to_github_stage: &send_url_to_github_stage
#  stage: "Send Url to GitHub"
#  image:
#    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
#    entrypoint: [""]
#  script:
#    - export DEPLOY_ID=$(cat github_deploy_id)
#    - envsubst < k8s/scripts/send-url.sh > k8s/scripts/send-url-to-github.sh
#    - sh k8s/scripts/send-url-to-github.sh $CI_COMMIT_REF_NAME
##
#
#Send deployment url to Github (dev):
#  <<: *send_url_to_github_stage
#  before_script:
#    - HASH_BRANCH_NAME=$(printf "$CI_COMMIT_REF_NAME" | sha1sum | cut -c1-5)
#    - export HASH_BRANCH_NAME=$HASH_BRANCH_NAME
#    - export URL=http://$HASH_BRANCH_NAME-egapro.${CI_ENVIRONMENT_NAME}.social.gouv.fr/
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  only:
#    - branches
#  except:
#    - master

#Send deployment url to Github (prod):
#  <<: *send_url_to_github_stage
#  before_script:
#    - export URL=http://egapro.${CI_ENVIRONMENT_NAME}/
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags

###########################################
###     DELETE USELESS K8S OBJECTS      ###
###########################################

#Delete useless k8s objects:
#  stage: "Delete K8S objects"
#  image:
#    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
#    entrypoint: [""]
#  before_script:
#    - /apps/create-kubeconfig.sh
#  script:
#    - python3 k8s/scripts/delete-k8s-objects.py
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  only:
#    - master
