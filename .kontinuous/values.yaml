x-secure-headers: &headers >-
  more_set_headers "X-Frame-Options: deny";

  more_set_headers "X-XSS-Protection: 1; mode=block";

  more_set_headers "X-Content-Type-Options: nosniff";

  more_set_headers "Referrer-Policy: no-referrer, strict-origin-when-cross-origin";

  more_set_headers
  "Permissions-Policy:
  fullscreen=(),
  display-capture=(),
  camera=(),
  microphone=(),
  web-share=(),
  geolocation=()"

  more_set_headers "Cross-Origin-Embedder-Policy: credentialless";

  more_set_headers "Cross-Origin-Resource-Policy: cross-origin";

  more_set_headers "Cross-Origin-Opener-Policy: same-origin";

global:
  pgSecretName: pg-app

app:
  ~chart: app
  ~needs: [build-app]
  imagePackage: app
  probesPath: /healthz
  containerPort: 3000
  ingress:
    enabled: false
  envFrom:
    - secretRef:
        name: "{{ .Values.global.pgSecretName }}"
    - secretRef:
        name: "staff"
    - secretRef:
        name: "egapro-secret"
    - secretRef:
        name: "moncomptepro"
    - secretRef:
        name: github-oauth
    - configMapRef:
        name: egapro
  env:
    - name: SENTRY_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: sentry
          key: SENTRY_AUTH_TOKEN
    - name: NEXT_PUBLIC_SENTRY_DSN
      valueFrom:
        secretKeyRef:
          name: sentry
          key: APP_SENTRY_DSN
  vars:
    POSTGRES_HOST: "$(PGHOST)"
    POSTGRES_DB: "$(PGDATABASE)"
    POSTGRES_PORT: "$(PGPORT)"
    POSTGRES_USER: "$(PGUSER)"
    POSTGRES_PASSWORD: "$(PGPASSWORD)"
    POSTGRES_SSLMODE: "$(PGSSLMODE)"
    SECURITY_JWT_SECRET: "$(EGAPRO_SECRET)"
    NEXT_PUBLIC_EGAPRO_ENV: "{{ .Values.global.env }}"
    NEXTAUTH_URL: "https://{{ .Values.global.host }}/api/auth"

nginx:
  ~chart: app
  ~needs: [build-nginx, app]
  imagePackage: nginx
  host: "{{ .Values.global.host }}"
  ingress:
    paths:
      - /
      - /api/auth(/|$)(.*)
      - /api/monitoring(/|$)(.*)
      - /index-egapro/recherche(/|$)(.*)
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: *headers
  certSecretName: api-crt
  containerPort: 8080
  probesPath: /live
  livenessProbe:
    httpGet:
      path: /live
      port: 8080
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
  lifecycle:
    preStop:
      exec:
        command: ["/pre-stop.sh"]
  resources:
    requests:
      cpu: 30m
      memory: 256Mi
    limits:
      cpu: 2
      memory: 1G

api:
  ~chart: app
  ~needs: [build-api]
  imagePackage: api
  probesPath: /healthz
  containerPort: 2626
  host: "{{ .Values.global.host }}"
  .ingress.path: /api(/|$)(.*)
  .ingress.rewriteTarget: /$2
  certSecretName: api-crt
  envFrom:
    - secretRef:
        name: "{{ .Values.global.pgSecretName }}"
    - secretRef:
        name: "staff"
    - secretRef:
        name: "egapro-secret"
  # env:
  #   - name: EGAPRO_SENTRY_DSN
  #     valueFrom:
  #       secretKeyRef:
  #         name: sentry
  #         key: API_SENTRY_DSN
  vars:
    EGAPRO_DBHOST: "$(PGHOST)"
    EGAPRO_DBNAME: "$(PGDATABASE)"
    EGAPRO_DBPORT: "$(PGPORT)"
    EGAPRO_DBUSER: "$(PGUSER)"
    EGAPRO_DBPASS: "$(PGPASSWORD)"
    EGAPRO_DBSSL: "$(PGSSLMODE)"

pg:
  ~chart: pg

redis:
  auth:
    existingSecret: redis-auth

files:
  ~chart: app
  ~needs: [build-api,build-files] # sidecar image
  # image: ghcr.io/socialgouv/docker/nginx:7.0.1
  imagePackage: files
  vars:
    WHITELIST_IP: "94.23.250.213,37.187.27.197,37.187.137.149,217.182.225.117,217.182.225.113,217.182.142.112,51.38.59.32,51.254.44.90"
    AUTH_PASSWD_FILE: /secrets/basic-auth.passwd
    TRUSTED_PROXY_IP: "20.74.10.146"
    FILES_PUBLIC: index-egalite-fh.xlsx,dgt-export-representation.xlsx
    FILES_RESTRICTED: dgt.xlsx,dgt-representation.xlsx,full.ndjson,indexes.csv
    ROOT_PATH: /mnt/files
  containerPort: 8080
  probesPort: 8080
  host: "{{ .Values.global.host }}"
  .ingress.enabled: false
  volumes:
    - name: files
      persistentVolumeClaim:
        claimName: files
    - name: nginx-auth
      secret:
        secretName: basic-auth
        items:
        - key: auth
          path: basic-auth.passwd
  replicas: 1 # mandatory because volume is RWO
  strategyType: Recreate # idem
  securityContext:
    fsGroup: 101
  volumeMounts:
    - name: files
      # mountPath: /usr/share/nginx/html
      mountPath: /mnt/files
    - name: nginx-auth
      mountPath: /secrets
  sidecars:
    - name: scheduler
      ~tpl~image: "{{ $.Values.global.registry }}/{{ $.Values.global.imageProject }}/{{ $.Values.global.imageRepository }}/api:{{ $.Values.global.imageTag }}"
      extraSpec:
        envFrom:
        - secretRef:
            ~tpl~name: "{{ .Values.global.pgSecretName }}"
        - secretRef:
            name: "staff"
        - secretRef:
            name: "egapro-secret"
        env:
        - name: EGAPRO_DBHOST
          value: "$(PGHOST)"
        - name: EGAPRO_DBNAME
          value: "$(PGDATABASE)"
        - name: EGAPRO_DBPORT
          value: "$(PGPORT)"
        - name: EGAPRO_DBUSER
          value: "$(PGUSER)"
        - name: EGAPRO_DBPASS
          value: "$(PGPASSWORD)"
        - name: EGAPRO_DBSSL
          value: "$(PGSSLMODE)"
        # - name: EGAPRO_SENTRY_DSN
        #   valueFrom:
        #     secretKeyRef:
        #       name: sentry
        #       key: API_SENTRY_DSN
        - name: SCHEDULER
          value: "True"
        volumeMounts:
        - name: files
          mountPath: /mnt/files

project:
  # whitelist:
  #   # DigDash dev
  #   - "94.23.250.213"
  #   # DigDash prod 1 and 2
  #   - "37.187.27.197"
  #   - "37.187.137.149"
  #   - "217.182.225.117"
  #   - "217.182.225.113"
  #   # Invenis prod old and new
  #   - "217.182.142.112"
  #   - "51.38.59.32"
  files:
    public:
      - index-egalite-fh.xlsx
      - dgt-export-representation.xlsx
    restricted:
      - dgt.xlsx
      - dgt-representation.xlsx
      - full.ndjson
      - indexes.csv

jobs:
  ~chart: jobs
  runs:
    build-app:
      use: build
      memoryLimit: 14Gi
      memoryRequest: 2Gi
      env:
        - name: NEXT_PUBLIC_SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: sentry
              key: APP_SENTRY_DSN
      with:
        imagePackage: app
        dockerfile: packages/app/Dockerfile
        buildArgs:
          NEXT_PUBLIC_API_URL: "https://{{ .Values.global.host }}/api"
          NEXT_PUBLIC_API_V2_URL: "https://{{ .Values.global.host }}/apiv2"
          NEXTAUTH_URL: "https://{{ .Values.global.host }}/api/auth"
          NEXT_PUBLIC_GITHUB_SHA: "{{ $.Values.global.shortSha }}"
          NEXT_PUBLIC_EGAPRO_ENV: "{{ .Values.global.env }}"
          NEXT_PUBLIC_SENTRY_DSN: "$NEXT_PUBLIC_SENTRY_DSN"
          SENTRY_ORG: incubateur
          SENTRY_PROJECT: egapro-app
          SENTRY_URL: https://sentry2.fabrique.social.gouv.fr
          SENTRY_RELEASE: "{{ .Values.global.isProd | ternary .Values.global.imageTag (.Values.global.isPreProd | ternary .Values.global.shortSha .Values.global.branchSlug32) }}"
        secrets:
          sentry_auth_token:
            secretName: sentry
            secretKey: SENTRY_AUTH_TOKEN

    build-api:
      use: build
      with:
        imagePackage: api
        context: packages/api

    build-nginx:
      use: build
      with:
        imagePackage: nginx
        context: packages/nginx

    build-files:
      use: build
      with:
        imagePackage: files
        context: packages/files
