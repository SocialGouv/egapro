---

Notify Starting Deployment:
  extends: .base_notify_pending_stage
  stage: Deploy

#
.deploy_with_hpa_chart: &deploy_with_hpa_chart
  stage: Deploy
  extends: .base_deploy_hpa_chart_stage
  dependencies: []
  variables: &deploy_with_hpa_chart_variables
    REGISTRY: $CI_REGISTRY_IMAGE
#

############################################
####                APP                 ####
############################################

Deploy app:
  <<: *deploy_with_hpa_chart
  variables:
    <<: *deploy_with_hpa_chart_variables
    CONTEXT: app
    PORT: ${APP_PORT}
    VALUES_FILE: ./.k8s/app.values.yml
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy app (prod):
  <<: *deploy_with_hpa_chart
  variables:
    <<: *deploy_with_hpa_chart_variables
    CONTEXT: app
    PORT: ${APP_PORT}
    VALUES_FILE: ./.k8s/app.values.yml
    APP_RESOURCE_CPU_LIMIT: "250m"
    APP_RESOURCE_MEMORY_LIMIT: "256Mi"
    APP_RESOURCE_CPU_REQUEST: "250m"
    APP_RESOURCE_MEMORY_REQUEST: "256Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION


############################################
####                API                 ####
############################################

Deploy api:
  <<: *deploy_with_hpa_chart
  variables:
    <<: *deploy_with_hpa_chart_variables
    CONTEXT: api
    PORT: ${API_PORT}
    VALUES_FILE: ./.k8s/api.values.yml
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy api (prod):
  <<: *deploy_with_hpa_chart
  variables:
    <<: *deploy_with_hpa_chart_variables
    CONTEXT: api
    PORT: ${API_PORT}
    VALUES_FILE: ./.k8s/api.values.yml
    API_RESOURCE_CPU_LIMIT: "250m"
    API_RESOURCE_MEMORY_LIMIT: "256Mi"
    API_RESOURCE_CPU_REQUEST: "250m"
    API_RESOURCE_MEMORY_REQUEST: "256Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION


############################################
####              POSTGRES              ####
############################################

#
.deploy_postgres: &deploy_postgres
  stage: "Deploy"
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:${HELM_VERSION}
  variables: &deploy_postgres_variables
    HELM_RENDER_ARGS: ""
    CONTEXT: egapro
  script:
    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${PROJECT} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
    - helm init --client-only
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
    - helm just fetch "stable/postgresql#${POSTGRES_CHART_VERSION}"
    - envsubst < .k8s/postgres/values.yml > ./values.yaml
    - helm just render ${CONTEXT}-${BRANCH_HASH}-pg postgresql
      ${HELM_RENDER_ARGS}
      --values ./values.yaml
    - helm just apply ${CONTEXT}-${BRANCH_HASH}-pg
#

Deploy postgres:
  <<: *deploy_postgres
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy postgres (prod):
  <<: *deploy_postgres
  variables:
    <<: *deploy_postgres_variables
    ENABLE_PERSISTENT_VOLUME: "true"
    POSTGRES_RESOURCE_CPU_LIMIT: "500m"
    POSTGRES_RESOURCE_MEMORY_LIMIT: "512Mi"
    POSTGRES_RESOURCE_CPU_REQUEST: "500m"
    POSTGRES_RESOURCE_MEMORY_REQUEST: "512Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION


############################################
####              MEMCACHED             ####
############################################

#
.deploy_memcached: &deploy_memcached
  stage: "Deploy"
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:${HELM_VERSION}
  variables: &deploy_memcached_variables
    HELM_RENDER_ARGS: ""
    CONTEXT: egapro
  script:
    - helm init --client-only
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
    - helm just fetch "stable/memcached#${MEMCACHED_CHART_VERSION}"
    - envsubst < .k8s/memcached/values.yml > ./values.yaml
    - helm just render ${CONTEXT}-${BRANCH_HASH} memcached
      ${HELM_RENDER_ARGS}
      --values ./values.yaml
    - helm just apply ${CONTEXT}-${BRANCH_HASH}
#

Deploy memcached:
  <<: *deploy_memcached
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy memcached (prod):
  <<: *deploy_memcached
  variables:
    <<: *deploy_memcached_variables
    MEMCACHED_RESOURCE_CPU_LIMIT: "500m"
    MEMCACHED_RESOURCE_MEMORY_LIMIT: "256Mi"
    MEMCACHED_RESOURCE_CPU_REQUEST: "500m"
    MEMCACHED_RESOURCE_MEMORY_REQUEST: "256Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION


############################################
####                KINTO               ####
############################################

#
.deploy_kinto: &deploy_kinto
  stage: Deploy
  image: ${CI_REGISTRY}/socialgouv/docker/kubectl:${KUBECTL_VERSION}
  variables: &deploy_kinto_variables
    PORT: ${KINTO_PORT}
  script:
    - export POSTGRESQL_USER=$(kubectl get secret ${PROJECT} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_USER}' | base64 --decode)
    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${PROJECT} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
    - envsubst < .k8s/kinto/deployment.yml > .k8s/kinto/deployment-${PROJECT}.yml
    - envsubst < .k8s/kinto/service.yml > .k8s/kinto/service-${PROJECT}.yml
    - envsubst < .k8s/kinto/job-init-kinto.yml > .k8s/kinto/job-init-kinto-${PROJECT}.yml
    - kubectl delete job init-kinto -n ${K8S_NAMESPACE} || true;
    - kubectl apply -f .k8s/kinto/deployment-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/service-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/job-init-kinto-${PROJECT}.yml -n ${K8S_NAMESPACE}
#

Deploy kinto:
  <<: *deploy_kinto
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy kinto (prod):
  <<: *deploy_kinto
  variables:
    <<: *deploy_kinto_variables
    KINTO_RESOURCE_CPU_LIMIT: "500m"
    KINTO_RESOURCE_MEMORY_LIMIT: "512Mi"
    KINTO_RESOURCE_CPU_REQUEST: "500m"
    KINTO_RESOURCE_MEMORY_REQUEST: "512Mi"
    INIT_KINTO_RESOURCE_CPU_LIMIT: "20m"
    INIT_KINTO_RESOURCE_MEMORY_LIMIT: "64Mi"
    INIT_KINTO_RESOURCE_CPU_REQUEST: "20m"
    INIT_KINTO_RESOURCE_MEMORY_REQUEST: "16Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION


###########################################
###          DEPLOY TO PROD K8S         ###
###########################################

Deploy to production:
  stage: Deploy
  image: curlimages/curl:${CURL_VERSION}
  dependencies: []
  when: manual
  only:
    refs:
      - tags
  except:
    variables:
      - $PRODUCTION
  script:
    - curl --request POST
      --form ref="${CI_COMMIT_REF_NAME}"
      --form token="${CI_DEPLOY_TRIGGER}"
      --form variables[PRODUCTION]="true"
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/trigger/pipeline

Restore postgres:
  stage: Deploy
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:${HELM_VERSION}
  variables:
    HELM_RENDER_ARGS: ""
    CONTEXT: egapro
    PRODUCTION: "true"
    ENABLE_PERSISTENT_VOLUME: "true"
    PORT: ${KINTO_PORT}
    POSTGRES_RESOURCE_CPU_LIMIT: "500m"
    POSTGRES_RESOURCE_MEMORY_LIMIT: "512Mi"
    POSTGRES_RESOURCE_CPU_REQUEST: "25m"
    POSTGRES_RESOURCE_MEMORY_REQUEST: "128Mi"
  script:
    # init helm
    - helm init --client-only
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
    # azure volume secrets
    - export AZURE_STORAGE_ACCOUNT_NAME=$(kubectl get secret azure-${PROJECT}prod-volume -n ${PROJECT}-secret -ojsonpath='{.data.azurestorageaccountname}')
    - export AZURE_STORAGE_ACCOUNT_KEY=$(kubectl get secret azure-${PROJECT}prod-volume -n ${PROJECT}-secret -ojsonpath='{.data.azurestorageaccountkey}')
    - envsubst < .k8s/secret/secret-azure-volume.yml > .k8s/secret/secret-azure-volume-${PROJECT}.yml
    - kubectl apply -f .k8s/secret/secret-azure-volume-${PROJECT}.yml -n ${K8S_NAMESPACE}
    # delete old restore job, kinto and postgres
    - kubectl delete job restore-backup -n ${K8S_NAMESPACE} || true;
    - kubectl delete deploy kinto -n ${K8S_NAMESPACE} || true;
    - kubectl delete sts ${PROJECT}-${BRANCH_HASH}-pg-postgresql -n ${K8S_NAMESPACE} || true;
    - kubectl delete pvc data-${PROJECT}-${BRANCH_HASH}-pg-postgresql-0 -n ${K8S_NAMESPACE} || true;
    # deploy clean postgres
    - export POSTGRESQL_USER=$(kubectl get secret ${PROJECT} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_USER}' | base64 --decode)
    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${PROJECT} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
    - helm just fetch "stable/postgresql#6.5.6"
    - envsubst < .k8s/postgres/values.yml > ./values.yaml
    - helm just render ${CONTEXT}-${BRANCH_HASH}-pg postgresql
      ${HELM_RENDER_ARGS}
      --values ./values.yaml
    - helm just apply ${CONTEXT}-${BRANCH_HASH}-pg
    - kubectl wait --for=condition=Ready pod -l component=postgres -n ${K8S_NAMESPACE} --timeout=600s
#    # run restore job
    - envsubst < .k8s/postgres/restore-job.yml > .k8s/postgres/restore-job-${PROJECT}.yml
    - kubectl apply -f .k8s/postgres/restore-job-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl wait --for=condition=complete job/restore-backup --timeout=600s -n ${K8S_NAMESPACE}
#    # deploy kinto
    - envsubst < .k8s/kinto/deployment.yml > .k8s/kinto/deployment-${PROJECT}.yml
    - envsubst < .k8s/kinto/service.yml > .k8s/kinto/service-${PROJECT}.yml
    - envsubst < .k8s/kinto/job-init-kinto.yml > .k8s/kinto/job-init-kinto-${PROJECT}.yml
    - kubectl delete job init-kinto -n ${K8S_NAMESPACE} || true;
    - kubectl apply -f .k8s/kinto/deployment-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/service-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/job-init-kinto-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl wait --for=condition=complete job/init-kinto --timeout=600s -n ${K8S_NAMESPACE}
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    refs:
      - tags
  when: manual

...
