---

include:
  - project: SocialGouv/gitlab-ci-yml
    file: /base_deploy_hpa_chart_stage.yml
    ref: master


############################################
####                APP                 ####
############################################

#Deploy egapro/app (dev):
#  stage: "Deploy to hors prod K8S"
#  extends: .base_deploy_hpa_chart_stage
#  dependencies: []
#  variables:
#    REGISTRY: $CI_REGISTRY_IMAGE
#    IMAGE_TAG: $CI_COMMIT_SHA
#    CONTEXT: app
#    PORT: ${APP_PORT}
#    VALUES_FILE: ./.k8s/app.values.yml
#  environment:
#    name: ${DEV_NAMESPACE_ENVIRONMENT}
#  except:
#    variables:
#      - $PRODUCTION
#  allow_failure: false

Deploy egapro/app (prod):
  stage: "Deploy to hors prod K8S"
  extends: .base_deploy_hpa_chart_stage
  dependencies: []
  variables:
    REGISTRY: $CI_REGISTRY_IMAGE
    IMAGE_TAG: $CI_COMMIT_SHA
    CONTEXT: app
    PORT: ${APP_PORT}
    VALUES_FILE: ./.k8s/app.values.yml
  environment:
    name: prod
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION
#  allow_failure: false


############################################
####                API                 ####
############################################

#Deploy egapro/api (dev):
#  stage: "Deploy to hors prod K8S"
#  extends: .base_deploy_hpa_chart_stage
#  dependencies: []
#  variables:
#    REGISTRY: $CI_REGISTRY_IMAGE
#    IMAGE_TAG: $CI_COMMIT_SHA
#    CONTEXT: api
#    PORT: ${API_PORT}
#    VALUES_FILE: ./.k8s/api.values.yml
#  environment:
#    name: ${DEV_NAMESPACE_ENVIRONMENT}
#  except:
#    variables:
#      - $PRODUCTION
#  allow_failure: false

Deploy egapro/api (prod):
  stage: "Deploy to hors prod K8S"
  extends: .base_deploy_hpa_chart_stage
  dependencies: []
  variables:
    REGISTRY: $CI_REGISTRY_IMAGE
    IMAGE_TAG: $CI_COMMIT_SHA
    CONTEXT: api
    PORT: ${API_PORT}
    VALUES_FILE: ./.k8s/api.values.yml
  environment:
    name: prod
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION
#  allow_failure: false


############################################
####              POSTGRES              ####
############################################

#Deploy egapro/postgres (dev):
#  stage: "Deploy to hors prod K8S"
#  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:0.20.0
#  variables:
#    IMAGE_TAG: ${CI_COMMIT_SHA}
#    HELM_RENDER_ARGS: ""
#    CONTEXT: egapro
#  script:
#    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${STARTUP} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
#    - helm init --client-only
#    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
#    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
#    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
#    - helm just fetch "stable/postgresql#6.5.6"
#    - envsubst < .k8s/postgres/values.yml > ./values.yaml
#    - helm just render ${CONTEXT}-${BRANCH_HASH}-pg postgresql
#      ${HELM_RENDER_ARGS}
#      --values ./values.yaml
#    - helm just apply ${CONTEXT}-${BRANCH_HASH}-pg
#  environment:
#    name: ${DEV_NAMESPACE_ENVIRONMENT}
#  except:
#    variables:
#    - $PRODUCTION
#  allow_failure: false

Deploy egapro/postgres (prod):
  stage: "Deploy to hors prod K8S"
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:0.20.0
  variables:
    IMAGE_TAG: ${CI_COMMIT_SHA}
    HELM_RENDER_ARGS: ""
    CONTEXT: egapro
    ENABLE_PERSISTENT_VOLUME: "true"
  script:
    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${PROJECT} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
    - helm init --client-only
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
    - helm just fetch "stable/postgresql#6.5.6"
    - envsubst < .k8s/postgres/values.yml > ./values.yaml
    - helm just render ${CONTEXT}-${BRANCH_HASH}-pg postgresql
      ${HELM_RENDER_ARGS}
      --values ./values.yaml
    - helm just apply ${CONTEXT}-${BRANCH_HASH}-pg
  environment:
    name: prod
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION
#  allow_failure: false


############################################
####              MEMCACHED             ####
############################################

#Deploy egapro/memcached (dev):
#  stage: "Deploy to hors prod K8S"
#  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:0.20.0
#  variables:
#    IMAGE_TAG: ${CI_COMMIT_SHA}
#    HELM_RENDER_ARGS: ""
#    CONTEXT: egapro
#  script:
#    - helm init --client-only
#    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
#    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
#    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
#    - helm just fetch "stable/memcached#3.1.0"
#    - envsubst < .k8s/memcached/values.yml > ./values.yaml
#    - helm just render ${CONTEXT}-${BRANCH_HASH} memcached
#      ${HELM_RENDER_ARGS}
#      --values ./values.yaml
#    - helm just apply ${CONTEXT}-${BRANCH_HASH}
#  environment:
#    name: ${DEV_NAMESPACE_ENVIRONMENT}
#  except:
#    variables:
#      - $PRODUCTION
#  allow_failure: false

Deploy egapro/memcached (prod):
  stage: "Deploy to hors prod K8S"
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:0.20.0
  variables:
    IMAGE_TAG: ${CI_COMMIT_SHA}
    HELM_RENDER_ARGS: ""
    CONTEXT: egapro
  script:
    - helm init --client-only
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
    - helm just fetch "stable/memcached#3.1.0"
    - envsubst < .k8s/memcached/values.yml > ./values.yaml
    - helm just render ${CONTEXT}-${BRANCH_HASH} memcached
      ${HELM_RENDER_ARGS}
      --values ./values.yaml
    - helm just apply ${CONTEXT}-${BRANCH_HASH}
  environment:
    name: prod
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION
#  allow_failure: false


############################################
####                KINTO               ####
############################################

#Deploy egapro/kinto (dev):
#  stage: "Deploy to hors prod K8S"
#  image: ${CI_REGISTRY}/socialgouv/docker/kubectl:${KUBECTL_VERSION}
#  variables:
#    IMAGE_TAG: ${CI_COMMIT_SHA}
#    PORT: ${KINTO_PORT}
#  script:
#    - export POSTGRESQL_USER=$(kubectl get secret ${STARTUP} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_USER}' | base64 --decode)
#    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${STARTUP} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
#    - envsubst < .k8s/kinto/deployment.yml > .k8s/kinto/deployment-${STARTUP}.yml
#    - envsubst < .k8s/kinto/service.yml > .k8s/kinto/service-${STARTUP}.yml
#    - envsubst < .k8s/kinto/job-init-kinto.yml > .k8s/kinto/job-init-kinto-${STARTUP}.yml
#    - kubectl delete job init-kinto -n ${K8S_NAMESPACE} || true;
#    - kubectl apply -f .k8s/kinto/deployment-${STARTUP}.yml -n ${K8S_NAMESPACE}
#    - kubectl apply -f .k8s/kinto/service-${STARTUP}.yml -n ${K8S_NAMESPACE}
#    - kubectl apply -f .k8s/kinto/job-init-kinto-${STARTUP}.yml -n ${K8S_NAMESPACE}
#  environment:
#    name: ${DEV_NAMESPACE_ENVIRONMENT}
#  except:
#    variables:
#      - $PRODUCTION
#  allow_failure: false


Deploy egapro/kinto (prod):
  stage: "Deploy to hors prod K8S"
  image: ${CI_REGISTRY}/socialgouv/docker/kubectl:${KUBECTL_VERSION}
  variables:
    IMAGE_TAG: ${CI_COMMIT_SHA}
    PORT: ${KINTO_PORT}
  script:
    - export POSTGRESQL_USER=$(kubectl get secret ${STARTUP} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_USER}' | base64 --decode)
    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${STARTUP} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
    - envsubst < .k8s/kinto/deployment.yml > .k8s/kinto/deployment-${STARTUP}.yml
    - envsubst < .k8s/kinto/service.yml > .k8s/kinto/service-${STARTUP}.yml
    - envsubst < .k8s/kinto/job-init-kinto.yml > .k8s/kinto/job-init-kinto-${STARTUP}.yml
    - kubectl delete job init-kinto -n ${K8S_NAMESPACE} || true;
    - kubectl apply -f .k8s/kinto/deployment-${STARTUP}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/service-${STARTUP}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/job-init-kinto-${STARTUP}.yml -n ${K8S_NAMESPACE}
  environment:
    name: prod
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION
#  allow_failure: false

Restore egapro/postgres:
  stage: "Restore prod backup"
  image: ${CI_REGISTRY}/socialgouv/docker/helm:${HELM_VERSION}
  variables:
    PRODUCTION: "true"
    ENABLE_PERSISTENT_VOLUME: "true"
    HELM_RENDER_ARGS: ""
    CONTEXT: egapro
    PORT: ${KINTO_PORT}
  script:
    # azure volume secrets
    - export AZURE_STORAGE_ACCOUNT_NAME=$(kubectl get secret azure-${PROJECT}prod-volume -n ${PROJECT}-secret -ojsonpath='{.data.azurestorageaccountname}')
    - export AZURE_STORAGE_ACCOUNT_KEY=$(kubectl get secret azure-${PROJECT}prod-volume -n ${PROJECT}-secret -ojsonpath='{.data.azurestorageaccountkey}')
    - envsubst < .k8s/secret/secret-azure-volume.yml > .k8s/secret/secret-azure-volume-${PROJECT}.yml
    - kubectl apply -f .k8s/secret/secret-azure-volume-${PROJECT}.yml -n ${K8S_NAMESPACE}
    # delete old restore job, kinto and postgres
    - kubectl delete job restore-backup -n ${K8S_NAMESPACE} || true;
    - kubectl delete deploy kinto -n ${K8S_NAMESPACE} || true;
    - kubectl delete sts ${PROJECT}-${BRANCH_HASH}-pg-postgresql -n ${K8S_NAMESPACE} || true;
    - kubectl delete pvc data-${PROJECT}-${BRANCH_HASH}-pg-postgresql-0 -n ${K8S_NAMESPACE} || true;
    # deploy clean postgres
    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${PROJECT} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
    - helm init --client-only
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
    - helm just fetch "stable/postgresql#6.5.6"
    - envsubst < .k8s/postgres/values.yml > ./values.yaml
    - helm just render ${CONTEXT}-${BRANCH_HASH}-pg postgresql
      ${HELM_RENDER_ARGS}
      --values ./values.yaml
    - helm just apply ${CONTEXT}-${BRANCH_HASH}-pg
    - kubectl wait --for=condition=Ready pod -l component=postgres -n ${K8S_NAMESPACE} --timeout=600s
#    # run restore job
    - envsubst < .k8s/postgres/restore-job.yml > .k8s/postgres/restore-job-${PROJECT}.yml
    - kubectl apply -f .k8s/postgres/restore-job-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl wait --for=condition=complete job/restore-backup --timeout=600s -n ${K8S_NAMESPACE}
#    # deploy kinto
    - export POSTGRESQL_USER=$(kubectl get secret ${STARTUP} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_USER}' | base64 --decode)
    - export POSTGRESQL_PASSWORD=$(kubectl get secret ${STARTUP} -n ${K8S_NAMESPACE} -o jsonpath='{.data.POSTGRES_EGAPRO_PASSWORD}' | base64 --decode)
    - envsubst < .k8s/kinto/deployment.yml > .k8s/kinto/deployment-${STARTUP}.yml
    - envsubst < .k8s/kinto/service.yml > .k8s/kinto/service-${STARTUP}.yml
    - envsubst < .k8s/kinto/job-init-kinto.yml > .k8s/kinto/job-init-kinto-${STARTUP}.yml
    - kubectl delete job init-kinto -n ${K8S_NAMESPACE} || true;
    - kubectl apply -f .k8s/kinto/deployment-${STARTUP}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/service-${STARTUP}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f .k8s/kinto/job-init-kinto-${STARTUP}.yml -n ${K8S_NAMESPACE}
    - kubectl wait --for=condition=complete job/init-kinto --timeout=600s -n ${K8S_NAMESPACE}
  environment:
    name: prod
  only:
    - /^v.*/
  when: manual
...
